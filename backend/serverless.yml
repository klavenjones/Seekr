service: seekr-job-application-tracker

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverless

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  environment:
    USER_TABLE: USERS-${self:service}-${opt:stage, self:provider.stage}
    ACTIVITY_TABLE: ACTIVITY-${self:service}-${opt:stage, self:provider.stage}
    PROFILE_TABLE: PROFILE-${self:service}-${opt:stage, self:provider.stage}
    CONTACT_TABLE: CONTACT-${self:service}-${opt:stage, self:provider.stage}
    JOBS_TABLE: JOBS-${self:service}-${opt:stage, self:provider.stage}
    RESUME_TABLE: RESUME-${self:service}-${opt:stage, self:provider.stage}
    S3_BUCKET: seekr-klavenj-attachments-${self:provider.stage}
    


functions:
  CreateJob:
    handler: src/lambda/jobs/createJobs.handler
    events:
      - http:
          path: jobs
          method: post
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}
  
  GetJobs:
    handler: src/lambda/jobs/getAllJobs.handler
    events:
      - http:
          path: alljobs
          method: post
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}
  
  GetJobsByStatus:
    handler: src/lambda/jobs/getAllJobsByStatus.handler
    events:
      - http:
          path: jobs/status
          method: post
          cors: true
          request: 
            querystrings:
              status: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}

  UpdateJobs:
    handler: src/lambda/jobs/updateJobs.handler
    events:
      - http:
          path: jobs/{jobId}
          method: put
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}
  
  DeleteJob:
    handler: src/lambda/jobs/deleteJobs.handler
    events:
      - http:
          path: jobs/{jobId}
          method: delete
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.JOBS_TABLE}
     
resources:
  Resources:
    #API GATEWAY
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    #S3 Bucket
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET}
        CorsConfiguration:
           CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    
    AttachmentsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    #Dynamo DB
    #Jobs Table
    JobsTable:
      Type: AWS::DynamoDB::Table
      Properties:
         AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: jobId
            AttributeType: S
         KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: jobId
            KeyType: RANGE
         BillingMode: PAY_PER_REQUEST
         TableName: ${self:provider.environment.JOBS_TABLE}
        #  LocalSecondaryIndexes:
        #   - IndexName: ${self:provider.environment.INDEX_NAME}
        #     KeySchema:
        #       - AttributeName: userId
        #         KeyType: HASH
        #       - AttributeName: status
        #         KeyType: RANGE
        #     Projection:
        #       ProjectionType: ALL # What attributes will be copied to an index

    #ACTIVITY TABLE
    ActivityTable:
      Type: AWS::DynamoDB::Table
      Properties:
         AttributeDefinitions:
          - AttributeName: activityId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
         KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: activityId
            KeyType: RANGE
         BillingMode: PAY_PER_REQUEST
         TableName: ${self:provider.environment.ACTIVITY_TABLE}
    
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
         AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
         KeySchema:
          - AttributeName: userId
            KeyType: HASH
         BillingMode: PAY_PER_REQUEST
         TableName: ${self:provider.environment.USER_TABLE}


 
