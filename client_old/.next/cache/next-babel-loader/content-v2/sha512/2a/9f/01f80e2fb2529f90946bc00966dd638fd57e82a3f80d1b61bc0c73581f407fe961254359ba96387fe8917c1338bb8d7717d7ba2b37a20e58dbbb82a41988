{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\n\nconst AWS = require('aws-sdk');\n\nconst docClient = new AWS.DynamoDB.DocumentClient({\n  region: process.env.NEXT_PUBLIC_AWS_REGION,\n  accessKeyId: process.env.NEXT_PUBLIC_AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.NEXT_PUBLIC_AWS_SECRET_ACCESS_KEY\n});\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [Providers.Auth0({\n    clientId: process.env.NEXT_PUBLIC_AUTH0_CLIENT_ID,\n    clientSecret: process.env.NEXT_PUBLIC_AUTH0_CLIENT_SECRET,\n    domain: process.env.NEXT_PUBLIC_AUTH0_DOMAIN\n  })],\n  session: {\n    jwt: true,\n    maxAge: 1 * 60 * 60\n  },\n  callbacks: {\n    async signIn(user, account, profile) {\n      try {\n        let params = {\n          TableName: process.env.NEXT_PUBLIC_DYNAMODB_TABLE,\n          Key: {\n            userId: user.id\n          }\n        };\n        const currentUser = await docClient.get(params).promise();\n\n        if (Object.keys(currentUser).length <= 0) {\n          let newUser = {\n            TableName: process.env.NEXT_PUBLIC_DYNAMODB_TABLE,\n            Item: {\n              userId: user.id,\n              name: profile.name,\n              email: user.email,\n              image: user.image\n            }\n          };\n          await docClient.put(newUser).promise();\n        }\n      } catch (error) {\n        console.log(error.message);\n      }\n\n      return true;\n    }\n\n  }\n});","map":{"version":3,"sources":["/Users/klay/Documents/Seekr/client/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","AWS","require","docClient","DynamoDB","DocumentClient","region","process","env","NEXT_PUBLIC_AWS_REGION","accessKeyId","NEXT_PUBLIC_AWS_ACCESS_KEY_ID","secretAccessKey","NEXT_PUBLIC_AWS_SECRET_ACCESS_KEY","providers","Auth0","clientId","NEXT_PUBLIC_AUTH0_CLIENT_ID","clientSecret","NEXT_PUBLIC_AUTH0_CLIENT_SECRET","domain","NEXT_PUBLIC_AUTH0_DOMAIN","session","jwt","maxAge","callbacks","signIn","user","account","profile","params","TableName","NEXT_PUBLIC_DYNAMODB_TABLE","Key","userId","id","currentUser","get","promise","Object","keys","length","newUser","Item","name","email","image","put","error","console","log","message"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAAC,SAAD,CAAnB;;AAEA,MAAMC,SAAS,GAAG,IAAIF,GAAG,CAACG,QAAJ,CAAaC,cAAjB,CAAgC;AAChDC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,sBAD4B;AAEhDC,EAAAA,WAAW,EAAEH,OAAO,CAACC,GAAR,CAAYG,6BAFuB;AAGhDC,EAAAA,eAAe,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHmB,CAAhC,CAAlB;AAMA,eAAed,QAAQ,CAAC;AACtB;AACAe,EAAAA,SAAS,EAAE,CACTd,SAAS,CAACe,KAAV,CAAgB;AACdC,IAAAA,QAAQ,EAAET,OAAO,CAACC,GAAR,CAAYS,2BADR;AAEdC,IAAAA,YAAY,EAAEX,OAAO,CAACC,GAAR,CAAYW,+BAFZ;AAGdC,IAAAA,MAAM,EAAEb,OAAO,CAACC,GAAR,CAAYa;AAHN,GAAhB,CADS,CAFW;AAStBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE,IADE;AAEPC,IAAAA,MAAM,EAAE,IAAI,EAAJ,GAAS;AAFV,GATa;AAatBC,EAAAA,SAAS,EAAE;AACT,UAAMC,MAAN,CAAaC,IAAb,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC,UAAI;AACF,YAAIC,MAAM,GAAG;AACXC,UAAAA,SAAS,EAAExB,OAAO,CAACC,GAAR,CAAYwB,0BADZ;AAEXC,UAAAA,GAAG,EAAE;AAAEC,YAAAA,MAAM,EAAEP,IAAI,CAACQ;AAAf;AAFM,SAAb;AAIA,cAAMC,WAAW,GAAG,MAAMjC,SAAS,CAACkC,GAAV,CAAcP,MAAd,EAAsBQ,OAAtB,EAA1B;;AAEA,YAAIC,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBK,MAAzB,IAAmC,CAAvC,EAA0C;AACxC,cAAIC,OAAO,GAAG;AACZX,YAAAA,SAAS,EAAExB,OAAO,CAACC,GAAR,CAAYwB,0BADX;AAEZW,YAAAA,IAAI,EAAE;AACJT,cAAAA,MAAM,EAAEP,IAAI,CAACQ,EADT;AAEJS,cAAAA,IAAI,EAAEf,OAAO,CAACe,IAFV;AAGJC,cAAAA,KAAK,EAAElB,IAAI,CAACkB,KAHR;AAIJC,cAAAA,KAAK,EAAEnB,IAAI,CAACmB;AAJR;AAFM,WAAd;AAUA,gBAAM3C,SAAS,CAAC4C,GAAV,CAAcL,OAAd,EAAuBJ,OAAvB,EAAN;AACD;AACF,OApBD,CAoBE,OAAOU,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;;AAED,aAAO,IAAP;AACD;;AA3BQ;AAbW,CAAD,CAAvB","sourcesContent":["import NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\nconst AWS = require('aws-sdk')\n\nconst docClient = new AWS.DynamoDB.DocumentClient({\n  region: process.env.NEXT_PUBLIC_AWS_REGION,\n  accessKeyId: process.env.NEXT_PUBLIC_AWS_ACCESS_KEY_ID,\n  secretAccessKey: process.env.NEXT_PUBLIC_AWS_SECRET_ACCESS_KEY,\n})\n\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [\n    Providers.Auth0({\n      clientId: process.env.NEXT_PUBLIC_AUTH0_CLIENT_ID,\n      clientSecret: process.env.NEXT_PUBLIC_AUTH0_CLIENT_SECRET,\n      domain: process.env.NEXT_PUBLIC_AUTH0_DOMAIN,\n    }),\n  ],\n  session: {\n    jwt: true,\n    maxAge: 1 * 60 * 60,\n  },\n  callbacks: {\n    async signIn(user, account, profile) {\n      try {\n        let params = {\n          TableName: process.env.NEXT_PUBLIC_DYNAMODB_TABLE,\n          Key: { userId: user.id },\n        }\n        const currentUser = await docClient.get(params).promise()\n\n        if (Object.keys(currentUser).length <= 0) {\n          let newUser = {\n            TableName: process.env.NEXT_PUBLIC_DYNAMODB_TABLE,\n            Item: {\n              userId: user.id,\n              name: profile.name,\n              email: user.email,\n              image: user.image,\n            },\n          }\n\n          await docClient.put(newUser).promise()\n        }\n      } catch (error) {\n        console.log(error.message)\n      }\n\n      return true\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}