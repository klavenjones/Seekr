{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/klay/Documents/Seekr/client/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/klay/Documents/Seekr/client/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/klay/Documents/Seekr/client/components/pages/dashboard/jobtabs/wishlist.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState, useEffect, useContext } from 'react';\nimport { JobList } from '../../../listitems';\nimport { Loader } from '../../../loader';\nexport function WishList(_ref) {\n  _s();\n\n  var refresh = _ref.refresh;\n\n  var _useState = useState([]),\n      jobs = _useState[0],\n      setJobs = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var fetchJobs = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios.post('/api/jobs/status', {\n                status: 'wishlist'\n              });\n\n            case 2:\n              response = _context.sent;\n\n              if (response.data.jobs) {\n                setLoading(false);\n                setJobs(response.data.jobs);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchJobs() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), []); // useEffect(async () => {\n  //   let response = await axios.post('/api/jobs/status', { status: 'wishlist' })\n  //   if (response.data.jobs) {\n  //     setLoading(false)\n  //     setJobs(response.data.jobs)\n  //   }\n  // })\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-gray-500 text-xs font-medium uppercase tracking-wide\",\n        children: \"My Wishlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"mt-3 grid grid-cols-1 gap-5 sm:gap-6 sm:grid-cols-2 lg:grid-cols-4\",\n        children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 22\n        }, this) : /*#__PURE__*/_jsxDEV(JobList, {\n          jobs: jobs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(WishList, \"xAXs/kqjedBdxYZ+TLlF70OyTQI=\");\n\n_c = WishList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WishList\");","map":{"version":3,"sources":["/Users/klay/Documents/Seekr/client/components/pages/dashboard/jobtabs/wishlist.jsx"],"names":["axios","useState","useEffect","useContext","JobList","Loader","WishList","refresh","jobs","setJobs","loading","setLoading","fetchJobs","post","status","response","data"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AAEA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,OAAO,SAASC,QAAT,OAA+B;AAAA;;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AAAA,kBACZN,QAAQ,CAAC,EAAD,CADI;AAAA,MAC7BO,IAD6B;AAAA,MACvBC,OADuB;;AAAA,mBAGNR,QAAQ,CAAC,IAAD,CAHF;AAAA,MAG7BS,OAH6B;AAAA,MAGpBC,UAHoB;;AAKpC,MAAMC,SAAS;AAAA,yEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACKZ,KAAK,CAACa,IAAN,CAAW,kBAAX,EAA+B;AAAEC,gBAAAA,MAAM,EAAE;AAAV,eAA/B,CADL;;AAAA;AACZC,cAAAA,QADY;;AAEhB,kBAAIA,QAAQ,CAACC,IAAT,CAAcR,IAAlB,EAAwB;AACtBG,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,gBAAAA,OAAO,CAACM,QAAQ,CAACC,IAAT,CAAcR,IAAf,CAAP;AACD;;AALe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATI,SAAS;AAAA;AAAA;AAAA,KAAf;;AAQAV,EAAAA,SAAS,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAEN,EAFM,CAAT,CAboC,CAiBpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAA,2BAEE;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,2DAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAI,QAAA,SAAS,EAAC,oEAAd;AAAA,kBACGQ,OAAO,gBAAG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBAAH,gBAAgB,QAAC,OAAD;AAAS,UAAA,IAAI,EAAEF;AAAf;AAAA;AAAA;AAAA;AAAA;AAD1B;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF,mBADF;AAaD;;GAtCeF,Q;;KAAAA,Q","sourcesContent":["import axios from 'axios'\nimport { useState, useEffect, useContext } from 'react'\n\nimport { JobList } from '../../../listitems'\nimport { Loader } from '../../../loader'\n\nexport function WishList({ refresh }) {\n  const [jobs, setJobs] = useState([])\n\n  const [loading, setLoading] = useState(true)\n\n  const fetchJobs = async () => {\n    let response = await axios.post('/api/jobs/status', { status: 'wishlist' })\n    if (response.data.jobs) {\n      setLoading(false)\n      setJobs(response.data.jobs)\n    }\n  }\n\n  useEffect(async () => {\n    \n  }, [])\n\n  // useEffect(async () => {\n  //   let response = await axios.post('/api/jobs/status', { status: 'wishlist' })\n  //   if (response.data.jobs) {\n  //     setLoading(false)\n  //     setJobs(response.data.jobs)\n  //   }\n  // })\n\n  return (\n    <>\n      {/* This example requires Tailwind CSS v2.0+ */}\n      <div>\n        <h2 className='text-gray-500 text-xs font-medium uppercase tracking-wide'>\n          My Wishlist\n        </h2>\n        <ul className='mt-3 grid grid-cols-1 gap-5 sm:gap-6 sm:grid-cols-2 lg:grid-cols-4'>\n          {loading ? <Loader /> : <JobList jobs={jobs} />}\n        </ul>\n      </div>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}