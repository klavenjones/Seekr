{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/klay/Documents/Seekr/client/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/klay/Documents/Seekr/client/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/klay/Documents/Seekr/client/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/klay/Documents/Seekr/client/components/pages/dashboard/jobtabs/wishlist.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { useJobs } from '../../../hooks/useJobs';\nimport { JobList } from '../../../listitems';\nimport { Loader } from '../../../loader';\nexport function WishList() {\n  _s();\n\n  var _useJobs = useJobs('wishlist'),\n      _useJobs2 = _slicedToArray(_useJobs, 2),\n      jobs = _useJobs2[0],\n      setJobs = _useJobs2[1];\n\n  var _useState = useState(true),\n      loading = _useState[0],\n      setLoading = _useState[1];\n\n  var fetchJobs = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return axios.post('/api/jobs/status', {\n                status: 'wishlist'\n              });\n\n            case 2:\n              response = _context.sent;\n\n              if (response.data.jobs) {\n                setLoading(false);\n                setJobs(response.data.jobs);\n              }\n\n              console.log('fetched');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchJobs() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            fetchJobs();\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), []);\n  if (!jobs) return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-gray-500 text-xs font-medium uppercase tracking-wide\",\n        children: \"My Wishlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"mt-3 grid grid-cols-1 gap-5 sm:gap-6 sm:grid-cols-2 lg:grid-cols-4\",\n        children: /*#__PURE__*/_jsxDEV(JobList, {\n          jobs: jobs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(WishList, \"egaWH4krSvm49zlLmCmLSq3FUTc=\", false, function () {\n  return [useJobs];\n});\n\n_c = WishList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WishList\");","map":{"version":3,"sources":["/Users/klay/Documents/Seekr/client/components/pages/dashboard/jobtabs/wishlist.jsx"],"names":["axios","useState","useEffect","useJobs","JobList","Loader","WishList","jobs","setJobs","loading","setLoading","fetchJobs","post","status","response","data","console","log"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,OAAO,SAASC,QAAT,GAAoB;AAAA;;AAAA,iBACDH,OAAO,CAAC,UAAD,CADN;AAAA;AAAA,MAClBI,IADkB;AAAA,MACZC,OADY;;AAAA,kBAEKP,QAAQ,CAAC,IAAD,CAFb;AAAA,MAElBQ,OAFkB;AAAA,MAETC,UAFS;;AAIzB,MAAMC,SAAS;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACKX,KAAK,CAACY,IAAN,CAAW,kBAAX,EAA+B;AAAEC,gBAAAA,MAAM,EAAE;AAAV,eAA/B,CADL;;AAAA;AACZC,cAAAA,QADY;;AAEhB,kBAAIA,QAAQ,CAACC,IAAT,CAAcR,IAAlB,EAAwB;AACtBG,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,gBAAAA,OAAO,CAACM,QAAQ,CAACC,IAAT,CAAcR,IAAf,CAAP;AACD;;AACDS,cAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;;AANgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAATN,SAAS;AAAA;AAAA;AAAA,KAAf;;AASAT,EAAAA,SAAS,wEAAC;AAAA;AAAA;AAAA;AAAA;AACRS,YAAAA,SAAS;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAEN,EAFM,CAAT;AAIA,MAAI,CAACJ,IAAL,EAAW,oBAAO,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,sBACE;AAAA,2BAEE;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,2DAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAI,QAAA,SAAS,EAAC,oEAAd;AAAA,+BACG,QAAC,OAAD;AAAS,UAAA,IAAI,EAAEA;AAAf;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF,mBADF;AAaD;;GAhCeD,Q;UACUH,O;;;KADVG,Q","sourcesContent":["import axios from 'axios'\nimport { useState, useEffect } from 'react'\nimport { useJobs } from '../../../hooks/useJobs'\nimport { JobList } from '../../../listitems'\nimport { Loader } from '../../../loader'\n\nexport function WishList() {\n  const [jobs, setJobs] = useJobs('wishlist')\n  const [loading, setLoading] = useState(true)\n\n  const fetchJobs = async () => {\n    let response = await axios.post('/api/jobs/status', { status: 'wishlist' })\n    if (response.data.jobs) {\n      setLoading(false)\n      setJobs(response.data.jobs)\n    }\n    console.log('fetched')\n  }\n\n  useEffect(async () => {\n    fetchJobs()\n  }, [])\n\n  if (!jobs) return <Loader />\n\n  return (\n    <>\n      {/* This example requires Tailwind CSS v2.0+ */}\n      <div>\n        <h2 className='text-gray-500 text-xs font-medium uppercase tracking-wide'>\n          My Wishlist\n        </h2>\n        <ul className='mt-3 grid grid-cols-1 gap-5 sm:gap-6 sm:grid-cols-2 lg:grid-cols-4'>\n         { <JobList jobs={jobs} />}\n        </ul>\n      </div>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}