{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { docClient } from '../../../util/docclient';\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [Providers.Auth0({\n    clientId: process.env.NEXT_PUBLIC_AUTH0_CLIENT_ID,\n    clientSecret: process.env.NEXT_PUBLIC_AUTH0_CLIENT_SECRET,\n    domain: process.env.NEXT_PUBLIC_AUTH0_DOMAIN\n  })],\n  // secret: process.env.SECRET,\n  session: {\n    jwt: true,\n    maxAge: 1 * 60 * 60\n  },\n  jwt: {\n    secret: process.env.SECRET,\n    encryption: true\n  },\n  callbacks: {\n    async session(session, user) {\n      session.user.userId = user.sub;\n      return session;\n    },\n\n    async jwt(token, user, account, profile, isNewUser) {\n      if (user !== null && user !== void 0 && user.id) {\n        token.userId = user.id;\n      }\n\n      return token;\n    },\n\n    async signIn(user, account, profile) {\n      try {\n        let params = {\n          TableName: process.env.NEXT_PUBLIC_DYNAMODB_TABLE,\n          Key: {\n            userId: user.id\n          }\n        };\n        const currentUser = await docClient.get(params).promise();\n\n        if (Object.keys(currentUser).length <= 0) {\n          let newUser = {\n            TableName: process.env.NEXT_PUBLIC_DYNAMODB_TABLE,\n            Item: {\n              userId: user.id,\n              name: profile.name,\n              email: user.email,\n              image: user.image\n            }\n          };\n          await docClient.put(newUser).promise();\n        }\n      } catch (error) {\n        console.log(error.message);\n      }\n\n      return true;\n    }\n\n  }\n});","map":{"version":3,"sources":["/Users/klay/Documents/Seekr/client/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","docClient","providers","Auth0","clientId","process","env","NEXT_PUBLIC_AUTH0_CLIENT_ID","clientSecret","NEXT_PUBLIC_AUTH0_CLIENT_SECRET","domain","NEXT_PUBLIC_AUTH0_DOMAIN","session","jwt","maxAge","secret","SECRET","encryption","callbacks","user","userId","sub","token","account","profile","isNewUser","id","signIn","params","TableName","NEXT_PUBLIC_DYNAMODB_TABLE","Key","currentUser","get","promise","Object","keys","length","newUser","Item","name","email","image","put","error","console","log","message"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,eAAeF,QAAQ,CAAC;AACtB;AACAG,EAAAA,SAAS,EAAE,CACTF,SAAS,CAACG,KAAV,CAAgB;AACdC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,2BADR;AAEdC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,+BAFZ;AAGdC,IAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHN,GAAhB,CADS,CAFW;AAStB;AACAC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE,IADE;AAEPC,IAAAA,MAAM,EAAE,IAAI,EAAJ,GAAS;AAFV,GAVa;AActBD,EAAAA,GAAG,EAAE;AACHE,IAAAA,MAAM,EAAEV,OAAO,CAACC,GAAR,CAAYU,MADjB;AAEHC,IAAAA,UAAU,EAAE;AAFT,GAdiB;AAkBtBC,EAAAA,SAAS,EAAE;AACT,UAAMN,OAAN,CAAcA,OAAd,EAAuBO,IAAvB,EAA6B;AAC3BP,MAAAA,OAAO,CAACO,IAAR,CAAaC,MAAb,GAAsBD,IAAI,CAACE,GAA3B;AACA,aAAOT,OAAP;AACD,KAJQ;;AAKT,UAAMC,GAAN,CAAUS,KAAV,EAAiBH,IAAjB,EAAuBI,OAAvB,EAAgCC,OAAhC,EAAyCC,SAAzC,EAAoD;AAClD,UAAIN,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEO,EAAV,EAAc;AACZJ,QAAAA,KAAK,CAACF,MAAN,GAAeD,IAAI,CAACO,EAApB;AACD;;AACD,aAAOJ,KAAP;AACD,KAVQ;;AAWT,UAAMK,MAAN,CAAaR,IAAb,EAAmBI,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC,UAAI;AACF,YAAII,MAAM,GAAG;AACXC,UAAAA,SAAS,EAAExB,OAAO,CAACC,GAAR,CAAYwB,0BADZ;AAEXC,UAAAA,GAAG,EAAE;AAAEX,YAAAA,MAAM,EAAED,IAAI,CAACO;AAAf;AAFM,SAAb;AAIA,cAAMM,WAAW,GAAG,MAAM/B,SAAS,CAACgC,GAAV,CAAcL,MAAd,EAAsBM,OAAtB,EAA1B;;AAEA,YAAIC,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBK,MAAzB,IAAmC,CAAvC,EAA0C;AACxC,cAAIC,OAAO,GAAG;AACZT,YAAAA,SAAS,EAAExB,OAAO,CAACC,GAAR,CAAYwB,0BADX;AAEZS,YAAAA,IAAI,EAAE;AACJnB,cAAAA,MAAM,EAAED,IAAI,CAACO,EADT;AAEJc,cAAAA,IAAI,EAAEhB,OAAO,CAACgB,IAFV;AAGJC,cAAAA,KAAK,EAAEtB,IAAI,CAACsB,KAHR;AAIJC,cAAAA,KAAK,EAAEvB,IAAI,CAACuB;AAJR;AAFM,WAAd;AAUA,gBAAMzC,SAAS,CAAC0C,GAAV,CAAcL,OAAd,EAAuBJ,OAAvB,EAAN;AACD;AACF,OApBD,CAoBE,OAAOU,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACD;;AAED,aAAO,IAAP;AACD;;AArCQ;AAlBW,CAAD,CAAvB","sourcesContent":["import NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\nimport { docClient } from '../../../util/docclient'\n\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [\n    Providers.Auth0({\n      clientId: process.env.NEXT_PUBLIC_AUTH0_CLIENT_ID,\n      clientSecret: process.env.NEXT_PUBLIC_AUTH0_CLIENT_SECRET,\n      domain: process.env.NEXT_PUBLIC_AUTH0_DOMAIN,\n    }),\n  ],\n  // secret: process.env.SECRET,\n  session: {\n    jwt: true,\n    maxAge: 1 * 60 * 60,\n  },\n  jwt: {\n    secret: process.env.SECRET,\n    encryption: true,\n  },\n  callbacks: {\n    async session(session, user) {\n      session.user.userId = user.sub\n      return session\n    },\n    async jwt(token, user, account, profile, isNewUser) {\n      if (user?.id) {\n        token.userId = user.id\n      }\n      return token\n    },\n    async signIn(user, account, profile) {\n      try {\n        let params = {\n          TableName: process.env.NEXT_PUBLIC_DYNAMODB_TABLE,\n          Key: { userId: user.id },\n        }\n        const currentUser = await docClient.get(params).promise()\n\n        if (Object.keys(currentUser).length <= 0) {\n          let newUser = {\n            TableName: process.env.NEXT_PUBLIC_DYNAMODB_TABLE,\n            Item: {\n              userId: user.id,\n              name: profile.name,\n              email: user.email,\n              image: user.image,\n            },\n          }\n\n          await docClient.put(newUser).promise()\n        }\n      } catch (error) {\n        console.log(error.message)\n      }\n\n      return true\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}