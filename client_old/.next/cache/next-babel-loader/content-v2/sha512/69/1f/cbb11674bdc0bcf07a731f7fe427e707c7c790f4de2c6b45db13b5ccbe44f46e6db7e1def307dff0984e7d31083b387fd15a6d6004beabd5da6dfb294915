{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/Users/klay/Documents/Seekr/client/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/klay/Documents/Seekr/client/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/Users/klay/Documents/Seekr/client/components/pages/dashboard/jobtabs/wishlist.jsx\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState, useEffect } from 'react';\nimport { JobList } from '../../../listitems';\nimport { Loader } from '../../../loader';\nexport function WishList() {\n  _s();\n\n  var _useState = useState([]),\n      jobs = _useState[0],\n      setJobs = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return axios.post('/api/jobs/status', {\n              status: 'wishlist'\n            });\n\n          case 2:\n            response = _context.sent;\n\n            if (response.data.jobs) {\n              setLoading(false);\n              setJobs(response.data.jobs);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), []);\n  useEffect( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return axios.post('/api/jobs/status', {\n              status: 'wishlist'\n            });\n\n          case 2:\n            response = _context2.sent;\n\n            if (response.data.jobs) {\n              setLoading(false);\n              setJobs(response.data.jobs);\n            }\n\n            console.log();\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-gray-500 text-xs font-medium uppercase tracking-wide\",\n        children: \"My Wishlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"mt-3 grid grid-cols-1 gap-5 sm:gap-6 sm:grid-cols-2 lg:grid-cols-4\",\n        children: loading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 22\n        }, this) : /*#__PURE__*/_jsxDEV(JobList, {\n          jobs: jobs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(WishList, \"1W7Pym/mhsCVEIB6ghybzBfsE+s=\");\n\n_c = WishList;\n\nvar _c;\n\n$RefreshReg$(_c, \"WishList\");","map":{"version":3,"sources":["/Users/klay/Documents/Seekr/client/components/pages/dashboard/jobtabs/wishlist.jsx"],"names":["axios","useState","useEffect","JobList","Loader","WishList","jobs","setJobs","loading","setLoading","post","status","response","data","console","log"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,OAAO,SAASC,QAAT,GAAoB;AAAA;;AAAA,kBACDJ,QAAQ,CAAC,EAAD,CADP;AAAA,MAClBK,IADkB;AAAA,MACZC,OADY;;AAAA,mBAEKN,QAAQ,CAAC,IAAD,CAFb;AAAA,MAElBO,OAFkB;AAAA,MAETC,UAFS;;AAIzBP,EAAAA,SAAS,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACaF,KAAK,CAACU,IAAN,CAAW,kBAAX,EAA+B;AAAEC,cAAAA,MAAM,EAAE;AAAV,aAA/B,CADb;;AAAA;AACJC,YAAAA,QADI;;AAER,gBAAIA,QAAQ,CAACC,IAAT,CAAcP,IAAlB,EAAwB;AACtBG,cAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,cAAAA,OAAO,CAACK,QAAQ,CAACC,IAAT,CAAcP,IAAf,CAAP;AACD;;AALO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAMN,EANM,CAAT;AAQAJ,EAAAA,SAAS,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACaF,KAAK,CAACU,IAAN,CAAW,kBAAX,EAA+B;AAAEC,cAAAA,MAAM,EAAE;AAAV,aAA/B,CADb;;AAAA;AACJC,YAAAA,QADI;;AAER,gBAAIA,QAAQ,CAACC,IAAT,CAAcP,IAAlB,EAAwB;AACtBG,cAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,cAAAA,OAAO,CAACK,QAAQ,CAACC,IAAT,CAAcP,IAAf,CAAP;AACD;;AACDQ,YAAAA,OAAO,CAACC,GAAR;;AANQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,GAAT;AASA,sBACE;AAAA,2BAEE;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,2DAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAI,QAAA,SAAS,EAAC,oEAAd;AAAA,kBACGP,OAAO,gBAAG,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBAAH,gBAAgB,QAAC,OAAD;AAAS,UAAA,IAAI,EAAEF;AAAf;AAAA;AAAA;AAAA;AAAA;AAD1B;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF,mBADF;AAaD;;GAlCeD,Q;;KAAAA,Q","sourcesContent":["import axios from 'axios'\nimport { useState, useEffect } from 'react'\n\nimport { JobList } from '../../../listitems'\nimport { Loader } from '../../../loader'\n\nexport function WishList() {\n  const [jobs, setJobs] = useState([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(async () => {\n    let response = await axios.post('/api/jobs/status', { status: 'wishlist' })\n    if (response.data.jobs) {\n      setLoading(false)\n      setJobs(response.data.jobs)\n    }\n  }, [])\n\n  useEffect(async () => {\n    let response = await axios.post('/api/jobs/status', { status: 'wishlist' })\n    if (response.data.jobs) {\n      setLoading(false)\n      setJobs(response.data.jobs)\n    }\n    console.log()\n  })\n\n  return (\n    <>\n      {/* This example requires Tailwind CSS v2.0+ */}\n      <div>\n        <h2 className='text-gray-500 text-xs font-medium uppercase tracking-wide'>\n          My Wishlist\n        </h2>\n        <ul className='mt-3 grid grid-cols-1 gap-5 sm:gap-6 sm:grid-cols-2 lg:grid-cols-4'>\n          {loading ? <Loader /> : <JobList jobs={jobs} />}\n        </ul>\n      </div>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}