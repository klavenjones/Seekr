{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nexport function useJobs(status) {\n  const {\n    0: jobs,\n    1: setJobs\n  } = useState([]);\n  const {\n    0: jobStatus,\n    1: setStatus\n  } = useState('wishlist');\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: refreshed,\n    1: setRefreshed\n  } = useState(0);\n\n  const fetchJobsByStatus = async status => {\n    try {\n      let response = await axios.post('/api/jobs/status', {\n        status: status\n      });\n      setJobs(response.data.jobs);\n      setLoading(false);\n    } catch (error) {\n      console.log('Hook', error.message);\n    }\n  };\n\n  const editJob = async (jobId, data) => {\n    await axios.put('/api/jobs/update', _objectSpread({\n      jobId\n    }, data));\n    setRefreshed(1);\n  };\n\n  useEffect(async () => {\n    fetchJobsByStatus(jobStatus);\n  }, []);\n  useEffect(async () => {\n    fetchJobsByStatus(jobStatus);\n  }, [refreshed]);\n  return {\n    jobs,\n    editJob,\n    loading\n  };\n}","map":{"version":3,"sources":["/Users/klay/Documents/Seekr/client/components/hooks/useJobs.jsx"],"names":["axios","useEffect","useState","useJobs","status","jobs","setJobs","jobStatus","setStatus","loading","setLoading","refreshed","setRefreshed","fetchJobsByStatus","response","post","data","error","console","log","message","editJob","jobId","put"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;AAC9B,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACK,SAAD;AAAA,OAAYC;AAAZ,MAAyBN,QAAQ,CAAC,UAAD,CAAvC;AACA,QAAM;AAAA,OAACO,OAAD;AAAA,OAAUC;AAAV,MAAwBR,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM;AAAA,OAACS,SAAD;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAC,CAAD,CAA1C;;AAEA,QAAMW,iBAAiB,GAAG,MAAOT,MAAP,IAAkB;AAC1C,QAAI;AACF,UAAIU,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAN,CAAW,kBAAX,EAA+B;AAClDX,QAAAA,MAAM,EAAEA;AAD0C,OAA/B,CAArB;AAIAE,MAAAA,OAAO,CAACQ,QAAQ,CAACE,IAAT,CAAcX,IAAf,CAAP;AACAK,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAPD,CAOE,OAAOO,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,KAAK,CAACG,OAA1B;AACD;AACF,GAXD;;AAaA,QAAMC,OAAO,GAAG,OAAOC,KAAP,EAAcN,IAAd,KAAuB;AACrC,UAAMhB,KAAK,CAACuB,GAAN,CAAU,kBAAV;AACJD,MAAAA;AADI,OAEDN,IAFC,EAAN;AAIAJ,IAAAA,YAAY,CAAC,CAAD,CAAZ;AACD,GAND;;AAQAX,EAAAA,SAAS,CAAC,YAAY;AACpBY,IAAAA,iBAAiB,CAACN,SAAD,CAAjB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAN,EAAAA,SAAS,CAAC,YAAY;AACpBY,IAAAA,iBAAiB,CAACN,SAAD,CAAjB;AACD,GAFQ,EAEN,CAACI,SAAD,CAFM,CAAT;AAIA,SAAO;AAAEN,IAAAA,IAAF;AAAQgB,IAAAA,OAAR;AAAiBZ,IAAAA;AAAjB,GAAP;AACD","sourcesContent":["import axios from 'axios'\nimport { useEffect, useState } from 'react'\n\nexport function useJobs(status) {\n  const [jobs, setJobs] = useState([])\n  const [jobStatus, setStatus] = useState('wishlist')\n  const [loading, setLoading] = useState(true)\n  const [refreshed, setRefreshed] = useState(0)\n\n  const fetchJobsByStatus = async (status) => {\n    try {\n      let response = await axios.post('/api/jobs/status', {\n        status: status,\n      })\n\n      setJobs(response.data.jobs)\n      setLoading(false)\n    } catch (error) {\n      console.log('Hook', error.message)\n    }\n  }\n\n  const editJob = async (jobId, data) => {\n    await axios.put('/api/jobs/update', {\n      jobId,\n      ...data,\n    })\n    setRefreshed(1)\n  }\n\n  useEffect(async () => {\n    fetchJobsByStatus(jobStatus)\n  }, [])\n\n  useEffect(async () => {\n    fetchJobsByStatus(jobStatus)\n  }, [refreshed])\n\n  return { jobs, editJob, loading }\n}\n"]},"metadata":{},"sourceType":"module"}