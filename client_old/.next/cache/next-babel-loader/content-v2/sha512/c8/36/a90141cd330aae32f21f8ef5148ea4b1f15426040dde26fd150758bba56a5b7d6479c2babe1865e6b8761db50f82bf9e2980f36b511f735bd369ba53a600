{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\nexport function useJobs(status) {\n  const {\n    0: jobs,\n    1: setJobs\n  } = useState([]);\n  const {\n    0: refreshed,\n    1: setRefreshed\n  } = useState(false);\n\n  const fetchJobsByStatus = async () => {\n    let response = await axios.post('/api/jobs/status', {\n      status: status\n    });\n\n    if (response.data.jobs) {\n      setLoading(false);\n      setJobs(response.data.jobs);\n    }\n  };\n\n  const editJob = async (jobId, data) => {\n    let response = await axios.put('/api/jobs/update', _objectSpread({\n      jobId\n    }, data));\n    setRefreshed(refreshed);\n    console.log(response.data);\n  };\n\n  useEffect(async () => {\n    fetchJobsByStatus();\n  }, []);\n  useEffect(async () => {\n    fetchJobsByStatus();\n  }, [refreshed]);\n  return [jobs, editJob];\n}","map":{"version":3,"sources":["/Users/klay/Documents/Seekr/client/components/hooks/useJobs.jsx"],"names":["axios","useEffect","useState","useJobs","status","jobs","setJobs","refreshed","setRefreshed","fetchJobsByStatus","response","post","data","setLoading","editJob","jobId","put","console","log"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,OAAO,SAASC,OAAT,CAAiBC,MAAjB,EAAyB;AAC9B,QAAM;AAAA,OAACC,IAAD;AAAA,OAAOC;AAAP,MAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM;AAAA,OAACK,SAAD;AAAA,OAAYC;AAAZ,MAA4BN,QAAQ,CAAC,KAAD,CAA1C;;AAEA,QAAMO,iBAAiB,GAAG,YAAY;AACpC,QAAIC,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,kBAAX,EAA+B;AAAEP,MAAAA,MAAM,EAAEA;AAAV,KAA/B,CAArB;;AACA,QAAIM,QAAQ,CAACE,IAAT,CAAcP,IAAlB,EAAwB;AACtBQ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAP,MAAAA,OAAO,CAACI,QAAQ,CAACE,IAAT,CAAcP,IAAf,CAAP;AACD;AACF,GAND;;AAQA,QAAMS,OAAO,GAAG,OAAOC,KAAP,EAAcH,IAAd,KAAuB;AACrC,QAAIF,QAAQ,GAAG,MAAMV,KAAK,CAACgB,GAAN,CAAU,kBAAV;AACnBD,MAAAA;AADmB,OAEhBH,IAFgB,EAArB;AAIAJ,IAAAA,YAAY,CAACD,SAAD,CAAZ;AACAU,IAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACE,IAArB;AACD,GAPD;;AASAX,EAAAA,SAAS,CAAC,YAAY;AACpBQ,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,EAFM,CAAT;AAIAR,EAAAA,SAAS,CAAC,YAAY;AACpBQ,IAAAA,iBAAiB;AAClB,GAFQ,EAEN,CAACF,SAAD,CAFM,CAAT;AAIA,SAAO,CAACF,IAAD,EAAOS,OAAP,CAAP;AACD","sourcesContent":["import axios from 'axios'\nimport { useEffect, useState } from 'react'\n\nexport function useJobs(status) {\n  const [jobs, setJobs] = useState([])\n  const [refreshed, setRefreshed] = useState(false)\n\n  const fetchJobsByStatus = async () => {\n    let response = await axios.post('/api/jobs/status', { status: status })\n    if (response.data.jobs) {\n      setLoading(false)\n      setJobs(response.data.jobs)\n    }\n  }\n\n  const editJob = async (jobId, data) => {\n    let response = await axios.put('/api/jobs/update', {\n      jobId,\n      ...data,\n    })\n    setRefreshed(refreshed)\n    console.log(response.data)\n  }\n\n  useEffect(async () => {\n    fetchJobsByStatus()\n  }, [])\n\n  useEffect(async () => {\n    fetchJobsByStatus()\n  }, [refreshed])\n\n  return [jobs, editJob]\n}\n"]},"metadata":{},"sourceType":"module"}