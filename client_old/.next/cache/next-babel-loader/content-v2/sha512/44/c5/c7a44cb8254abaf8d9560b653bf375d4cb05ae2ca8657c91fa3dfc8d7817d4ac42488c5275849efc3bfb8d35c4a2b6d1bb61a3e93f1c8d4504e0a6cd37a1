{"ast":null,"code":"import NextAuth from 'next-auth';\nimport Providers from 'next-auth/providers';\nimport { docClient } from '../../../util/docclient';\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [Providers.Auth0({\n    clientId: process.env.NEXT_PUBLIC_AUTH0_CLIENT_ID,\n    clientSecret: process.env.NEXT_PUBLIC_AUTH0_CLIENT_SECRET,\n    domain: process.env.NEXT_PUBLIC_AUTH0_DOMAIN\n  })],\n  session: {\n    jwt: true,\n    maxAge: 1 * 60 * 60\n  },\n  callbacks: {\n    async session(session, user) {\n      console.log('Session');\n      console.log('USER', user);\n      session.user.userId = user.sub;\n      console.log('SESSION', session);\n      return session;\n    },\n\n    async signIn(user, account, profile) {\n      try {\n        let params = {\n          TableName: process.env.NEXT_PUBLIC_DYNAMODB_TABLE,\n          Key: {\n            userId: user.id\n          }\n        };\n        const currentUser = await docClient.get(params).promise();\n\n        if (Object.keys(currentUser).length <= 0) {\n          let newUser = {\n            TableName: process.env.NEXT_PUBLIC_DYNAMODB_TABLE,\n            Item: {\n              userId: user.id,\n              name: profile.name,\n              email: user.email,\n              image: user.image\n            }\n          };\n          await docClient.put(newUser).promise();\n        }\n      } catch (error) {\n        console.log(error.message);\n      }\n\n      return true;\n    }\n\n  }\n});","map":{"version":3,"sources":["/Users/klay/Documents/Seekr/client/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","docClient","providers","Auth0","clientId","process","env","NEXT_PUBLIC_AUTH0_CLIENT_ID","clientSecret","NEXT_PUBLIC_AUTH0_CLIENT_SECRET","domain","NEXT_PUBLIC_AUTH0_DOMAIN","session","jwt","maxAge","callbacks","user","console","log","userId","sub","signIn","account","profile","params","TableName","NEXT_PUBLIC_DYNAMODB_TABLE","Key","id","currentUser","get","promise","Object","keys","length","newUser","Item","name","email","image","put","error","message"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA,eAAeF,QAAQ,CAAC;AACtB;AACAG,EAAAA,SAAS,EAAE,CACTF,SAAS,CAACG,KAAV,CAAgB;AACdC,IAAAA,QAAQ,EAAEC,OAAO,CAACC,GAAR,CAAYC,2BADR;AAEdC,IAAAA,YAAY,EAAEH,OAAO,CAACC,GAAR,CAAYG,+BAFZ;AAGdC,IAAAA,MAAM,EAAEL,OAAO,CAACC,GAAR,CAAYK;AAHN,GAAhB,CADS,CAFW;AAStBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,GAAG,EAAE,IADE;AAEPC,IAAAA,MAAM,EAAE,IAAI,EAAJ,GAAS;AAFV,GATa;AAatBC,EAAAA,SAAS,EAAE;AACT,UAAMH,OAAN,CAAcA,OAAd,EAAuBI,IAAvB,EAA6B;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;AACAJ,MAAAA,OAAO,CAACI,IAAR,CAAaG,MAAb,GAAsBH,IAAI,CAACI,GAA3B;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBN,OAAvB;AACA,aAAOA,OAAP;AACD,KAPQ;;AAQT,UAAMS,MAAN,CAAaL,IAAb,EAAmBM,OAAnB,EAA4BC,OAA5B,EAAqC;AACnC,UAAI;AACF,YAAIC,MAAM,GAAG;AACXC,UAAAA,SAAS,EAAEpB,OAAO,CAACC,GAAR,CAAYoB,0BADZ;AAEXC,UAAAA,GAAG,EAAE;AAAER,YAAAA,MAAM,EAAEH,IAAI,CAACY;AAAf;AAFM,SAAb;AAIA,cAAMC,WAAW,GAAG,MAAM5B,SAAS,CAAC6B,GAAV,CAAcN,MAAd,EAAsBO,OAAtB,EAA1B;;AAEA,YAAIC,MAAM,CAACC,IAAP,CAAYJ,WAAZ,EAAyBK,MAAzB,IAAmC,CAAvC,EAA0C;AACxC,cAAIC,OAAO,GAAG;AACZV,YAAAA,SAAS,EAAEpB,OAAO,CAACC,GAAR,CAAYoB,0BADX;AAEZU,YAAAA,IAAI,EAAE;AACJjB,cAAAA,MAAM,EAAEH,IAAI,CAACY,EADT;AAEJS,cAAAA,IAAI,EAAEd,OAAO,CAACc,IAFV;AAGJC,cAAAA,KAAK,EAAEtB,IAAI,CAACsB,KAHR;AAIJC,cAAAA,KAAK,EAAEvB,IAAI,CAACuB;AAJR;AAFM,WAAd;AAUA,gBAAMtC,SAAS,CAACuC,GAAV,CAAcL,OAAd,EAAuBJ,OAAvB,EAAN;AACD;AACF,OApBD,CAoBE,OAAOU,KAAP,EAAc;AACdxB,QAAAA,OAAO,CAACC,GAAR,CAAYuB,KAAK,CAACC,OAAlB;AACD;;AAED,aAAO,IAAP;AACD;;AAlCQ;AAbW,CAAD,CAAvB","sourcesContent":["import NextAuth from 'next-auth'\nimport Providers from 'next-auth/providers'\nimport { docClient } from '../../../util/docclient'\n\nexport default NextAuth({\n  // Configure one or more authentication providers\n  providers: [\n    Providers.Auth0({\n      clientId: process.env.NEXT_PUBLIC_AUTH0_CLIENT_ID,\n      clientSecret: process.env.NEXT_PUBLIC_AUTH0_CLIENT_SECRET,\n      domain: process.env.NEXT_PUBLIC_AUTH0_DOMAIN,\n    }),\n  ],\n  session: {\n    jwt: true,\n    maxAge: 1 * 60 * 60,\n  },\n  callbacks: {\n    async session(session, user) {\n      console.log('Session')\n      console.log('USER', user)\n      session.user.userId = user.sub\n      console.log('SESSION', session)\n      return session\n    },\n    async signIn(user, account, profile) {\n      try {\n        let params = {\n          TableName: process.env.NEXT_PUBLIC_DYNAMODB_TABLE,\n          Key: { userId: user.id },\n        }\n        const currentUser = await docClient.get(params).promise()\n\n        if (Object.keys(currentUser).length <= 0) {\n          let newUser = {\n            TableName: process.env.NEXT_PUBLIC_DYNAMODB_TABLE,\n            Item: {\n              userId: user.id,\n              name: profile.name,\n              email: user.email,\n              image: user.image,\n            },\n          }\n\n          await docClient.put(newUser).promise()\n        }\n      } catch (error) {\n        console.log(error.message)\n      }\n\n      return true\n    },\n  },\n})\n"]},"metadata":{},"sourceType":"module"}