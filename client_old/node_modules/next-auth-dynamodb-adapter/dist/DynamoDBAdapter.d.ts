import { DynamoDBClientConfig } from '@aws-sdk/client-dynamodb';
import { AppOptions, User } from 'next-auth';
import { Adapter, AdapterInstance, Profile, Session, VerificationRequest } from 'next-auth/adapters';
import logger from 'next-auth/dist/lib/logger';
import { createUser } from './methods/createUser';
import { createVerificationRequest } from './methods/createVerificationRequest';
import { deleteVerificationRequest } from './methods/deleteVerificationRequest';
import { getVerificationRequest } from './methods/getVerificationRequest';
export declare class DynamoDBAdapterInstance implements AdapterInstance<User, Profile, Session, VerificationRequest> {
    private readonly _appOptions;
    private readonly _client;
    private readonly _tableOptions;
    private readonly _logger;
    readonly createVerificationRequest: ReturnType<typeof createVerificationRequest>;
    readonly getVerificationRequest: ReturnType<typeof getVerificationRequest>;
    readonly createUser: ReturnType<typeof createUser>;
    readonly deleteVerificationRequest: ReturnType<typeof deleteVerificationRequest>;
    constructor({ appOptions, clientOptions, tableOptions, }: {
        readonly appOptions: AppOptions;
        readonly clientOptions: DynamoDBClientConfig;
        readonly tableOptions: TableOptions;
    });
    readonly getUser: (id: string) => Promise<User | null>;
    readonly getUserByEmail: (email: string) => Promise<User | null>;
    readonly getUserByProviderAccountId: (providerId: string, providerAccountId: string) => Promise<User | null>;
    readonly updateUser: (user: User) => Promise<User>;
    readonly linkAccount: (userId: string, _providerId: string, _providerType: string, _providerAccountId: string, _refreshToken: string, _accessToken: string, _accessTokenExpires: number) => Promise<void>;
    readonly createSession: (user: User) => Promise<Session>;
    readonly getSession: (sessionToken: string) => Promise<Session | null>;
    readonly updateSession: (session: Session, _force?: boolean | undefined) => Promise<Session>;
    readonly deleteSession: (sessionToken: string) => Promise<void>;
}
export declare class DynamoDBAdapter implements Adapter<User, Profile, Session, VerificationRequest> {
    private readonly _clientOptions;
    private readonly _tableOptions;
    constructor(clientOptions: DynamoDBClientConfig, tableOptions: TableOptions);
    getAdapter(appOptions: AppOptions): Promise<AdapterInstance<User, Profile, Session, VerificationRequest>>;
}
export interface TableOptions {
    readonly verificationRequestsTable?: string;
    readonly usersTable?: string;
}
export interface LoggerMethod {
    readonly error: typeof logger.error;
    readonly info: typeof logger.info;
    readonly debug: typeof logger.debug | (() => null);
}
export declare const loggerFactory: ({ debug, }: {
    readonly debug: boolean;
}) => LoggerMethod;
export declare const mockSession: {
    userId: string;
    expires: Date;
    sessionToken: string;
    accessToken: string;
};
export declare const VERIFICATION_TOKEN_MAX_AGE = 86400;
export declare const ERROR_TOKEN_EXPIRED = "Invalid token expiration date, request new verification email.";
export declare const ERROR_TOKEN_EXPIRED_DATE_FORMAT = "Token expiration is not Date object";
export declare const ERROR_TOKEN_INVALID = "Invalid token signature.";
