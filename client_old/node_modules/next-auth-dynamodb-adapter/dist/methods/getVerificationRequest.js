"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getVerificationRequest = void 0;
var client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
var bcrypt_1 = __importDefault(require("bcrypt"));
var DynamoDBAdapter_1 = require("../DynamoDBAdapter");
var getVerificationRequest = function (_a) {
    var client = _a.client, logger = _a.logger, tableOptions = _a.tableOptions;
    return function (email, verificationToken, _secret, _provider) {
        var DEBUG_ID = 'getVerificationRequest';
        logger.debug(DEBUG_ID, email, verificationToken);
        var verificationRequestsTable = tableOptions.verificationRequestsTable;
        if (!verificationRequestsTable) {
            return Promise.reject(new Error('verificationRequestsTable name was not provided'));
        }
        var dateNow = new Date();
        var ItemCommandInput = {
            TableName: verificationRequestsTable,
            Key: {
                email: { S: email },
            },
        };
        return new Promise(function (resolve, reject) {
            return client
                .send(new client_dynamodb_1.GetItemCommand(ItemCommandInput))
                .then(function (clientResponse) {
                var _a, _b, _c, _d;
                var expiresString = (_b = (_a = clientResponse === null || clientResponse === void 0 ? void 0 : clientResponse.Item) === null || _a === void 0 ? void 0 : _a.expires) === null || _b === void 0 ? void 0 : _b.S;
                var token = (_d = (_c = clientResponse === null || clientResponse === void 0 ? void 0 : clientResponse.Item) === null || _c === void 0 ? void 0 : _c.token) === null || _d === void 0 ? void 0 : _d.S;
                if (!expiresString || !token) {
                    logger.debug(DEBUG_ID, 'Unable to retrieve required values from the database.');
                    return resolve(null);
                }
                if (Number.isNaN(Date.parse(expiresString))) {
                    return reject(new Error(DynamoDBAdapter_1.ERROR_TOKEN_EXPIRED_DATE_FORMAT));
                }
                var expiresDate = new Date(expiresString);
                if (expiresDate < dateNow) {
                    return reject(new Error(DynamoDBAdapter_1.ERROR_TOKEN_EXPIRED));
                }
                if (!bcrypt_1.default.compareSync(verificationToken, token)) {
                    return reject(new Error(DynamoDBAdapter_1.ERROR_TOKEN_INVALID));
                }
                return resolve({
                    identifier: email,
                    token: token,
                    expires: expiresDate,
                });
            })
                .catch(function (error) {
                logger.error(DEBUG_ID, error);
                reject(error);
            });
        });
    };
};
exports.getVerificationRequest = getVerificationRequest;
//# sourceMappingURL=getVerificationRequest.js.map