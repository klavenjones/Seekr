"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERROR_TOKEN_INVALID = exports.ERROR_TOKEN_EXPIRED_DATE_FORMAT = exports.ERROR_TOKEN_EXPIRED = exports.VERIFICATION_TOKEN_MAX_AGE = exports.mockSession = exports.loggerFactory = exports.DynamoDBAdapter = exports.DynamoDBAdapterInstance = void 0;
var client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
var logger_1 = __importDefault(require("next-auth/dist/lib/logger"));
var createUser_1 = require("./methods/createUser");
var createVerificationRequest_1 = require("./methods/createVerificationRequest");
var deleteVerificationRequest_1 = require("./methods/deleteVerificationRequest");
var getVerificationRequest_1 = require("./methods/getVerificationRequest");
var DynamoDBAdapterInstance = (function () {
    function DynamoDBAdapterInstance(_a) {
        var _this = this;
        var appOptions = _a.appOptions, clientOptions = _a.clientOptions, tableOptions = _a.tableOptions;
        this.getUser = function (id) {
            _this._logger.debug('getUser (not implemented)', [id]);
            return Promise.resolve(null);
        };
        this.getUserByEmail = function (email) {
            _this._logger.debug('getUserByEmail (not implemented)', [email]);
            return Promise.resolve(null);
        };
        this.getUserByProviderAccountId = function (providerId, providerAccountId) {
            _this._logger.debug('getUserByProviderAccountId (not implemented)', [
                providerId,
                providerAccountId,
            ]);
            return Promise.resolve(null);
        };
        this.updateUser = function (user) {
            _this._logger.debug('updateUser (not implemented)', [user]);
            return Promise.resolve(user);
        };
        this.linkAccount = function (userId, _providerId, _providerType, _providerAccountId, _refreshToken, _accessToken, _accessTokenExpires) {
            _this._logger.debug('linkAccount (not implemented)', [userId]);
            return Promise.resolve();
        };
        this.createSession = function (user) {
            _this._logger.debug('createSession (not implemented)', [user]);
            return Promise.resolve(exports.mockSession);
        };
        this.getSession = function (sessionToken) {
            _this._logger.debug('getSession (not implemented)', [sessionToken]);
            return Promise.resolve(exports.mockSession);
        };
        this.updateSession = function (session, _force) {
            _this._logger.debug('updateSession (not implemented)', [session]);
            return Promise.resolve(exports.mockSession);
        };
        this.deleteSession = function (sessionToken) {
            _this._logger.debug('deleteSession (not implemented)', [sessionToken]);
            return Promise.resolve();
        };
        this._appOptions = appOptions;
        this._client = new client_dynamodb_1.DynamoDBClient(clientOptions);
        this._tableOptions = tableOptions;
        var debug = appOptions.debug;
        this._logger = exports.loggerFactory({ debug: debug });
        var methodOptions = {
            client: this._client,
            logger: this._logger,
            tableOptions: this._tableOptions,
        };
        this.createVerificationRequest = createVerificationRequest_1.createVerificationRequest(__assign(__assign({}, methodOptions), { appOptions: this._appOptions }));
        this.getVerificationRequest = getVerificationRequest_1.getVerificationRequest(methodOptions);
        this.createUser = createUser_1.createUser(methodOptions);
        this.deleteVerificationRequest = deleteVerificationRequest_1.deleteVerificationRequest(methodOptions);
    }
    return DynamoDBAdapterInstance;
}());
exports.DynamoDBAdapterInstance = DynamoDBAdapterInstance;
var DynamoDBAdapter = (function () {
    function DynamoDBAdapter(clientOptions, tableOptions) {
        this._clientOptions = clientOptions;
        this._tableOptions = tableOptions;
    }
    DynamoDBAdapter.prototype.getAdapter = function (appOptions) {
        return Promise.resolve(new DynamoDBAdapterInstance({
            appOptions: appOptions,
            clientOptions: this._clientOptions,
            tableOptions: this._tableOptions,
        }));
    };
    return DynamoDBAdapter;
}());
exports.DynamoDBAdapter = DynamoDBAdapter;
var loggerFactory = function (_a) {
    var debug = _a.debug;
    return ({
        error: logger_1.default.error,
        info: logger_1.default.info,
        debug: debug ? logger_1.default.debug : function () { return null; },
    });
};
exports.loggerFactory = loggerFactory;
exports.mockSession = {
    userId: 'mockUserId',
    expires: new Date(),
    sessionToken: 'mockSessionToken',
    accessToken: 'mockAccessToken',
};
exports.VERIFICATION_TOKEN_MAX_AGE = 86400;
exports.ERROR_TOKEN_EXPIRED = 'Invalid token expiration date, request new verification email.';
exports.ERROR_TOKEN_EXPIRED_DATE_FORMAT = 'Token expiration is not Date object';
exports.ERROR_TOKEN_INVALID = 'Invalid token signature.';
//# sourceMappingURL=DynamoDBAdapter.js.map